{"version":3,"sources":["App.js","index.js"],"names":["App","useState","server_seed","amount","state","setState","useEffect","location","search","qr","seed","URLSearchParams","get","pre","chain","i","push","CryptoJS","SHA256","length","toString","enc","Hex","className","style","width","value","onChange","e","target","map","index","point","hash","salt","HmacSHA256","parse","slice","nBits","X","parseInt","parseFloat","toPrecision","result","Math","floor","min","max","getPoint","color","rootElement","document","getElementById","ReactDOM","render"],"mappings":"0PAIe,SAASA,IACtB,MAA0BC,mBAAS,CACjCC,YAAa,GACbC,OAAQ,KAFV,mBAAOC,EAAP,KAAcC,EAAd,KAKAC,qBAAU,WACR,GAAIC,SAASC,OAAQ,CACnB,IAAMC,EAAKF,SAASC,OAEdE,EADQ,IAAIC,gBAAgBF,GACfG,IAAI,QACnBF,GACFL,GAAS,SAACQ,GAAD,mBAAC,eAAcA,GAAf,IAAoBX,YAAaQ,UAG7C,CAACH,SAASC,SAyBb,IADA,IAAMM,EAAQ,CAACV,EAAMF,aACZa,EAAI,EAAGA,EAAIX,EAAMD,OAAQY,IAChCD,EAAME,KACJC,IAASC,OAAOJ,EAAMA,EAAMK,OAAS,IAAIC,SAASH,IAASI,IAAIC,MAKnE,OACE,sBAAKC,UAAU,MAAf,UACE,oEACA,uBACEC,MAAO,CAAEC,MAAO,KAChBC,MAAOtB,EAAMF,YACbyB,SAAU,SAACC,GAAD,OAAOvB,EAAS,2BAAKD,GAAN,IAAaF,YAAa0B,EAAEC,OAAOH,YAE9D,uBACA,uBACA,8EACA,uBACEA,MAAOtB,EAAMD,OACbwB,SAAU,SAACC,GAAD,OAAOvB,EAAS,2BAAKD,GAAN,IAAaD,OAAQyB,EAAEC,OAAOH,YAGzD,uBACA,+CAEEtB,EAAMF,aAA4C,KAA7BE,EAAMF,YAAYiB,OAKvC,kCACE,gCACE,+BACE,6CACA,2CAGJ,gCACGL,EAAMgB,KAAI,SAACpB,EAAMqB,GAEhB,IAAMC,EAhElB,SAAkBC,EAAMC,GACtB,IACIxB,EAAOuB,EAEPC,IAEFxB,EADaO,IAASkB,WAAWlB,IAASI,IAAIC,IAAIc,MAAM1B,GAAOwB,GACnDd,SAASH,IAASI,IAAIC,MAGpCZ,EAAOA,EAAK2B,MAAM,EAAGC,IACrB,IAEIC,EAFMC,SAAS9B,EAAM,IAEhB,SAAG,EAXE,IAcd6B,EAAI,IAAM,GAFVA,EAAIE,WAAWF,EAAEG,YAAY,MAI7B,IAAMC,EAASC,KAAKC,MAAMN,GAE1B,OAAOK,KAAKE,IAAI,IAAOF,KAAKG,IAAI,EAAGJ,EAAS,MA6CpBK,CAAStC,EAnCjC,oEAqCU,OACE,+BACE,oBAAIc,MAAO,CAAEyB,MAAOjB,EAAQ,EAAI,MAAQ,SAAxC,SACGA,IAEH,6BAAKtB,MAJP,cAAgBA,YAjBxB,oBAAIc,MAAO,CAAEyB,MAAO,OAApB,8DClER,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACtD,EAAD,MAEFkD,K","file":"static/js/main.0004414b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./styles.css\";\nimport CryptoJS from \"crypto-js\";\n\nexport default function App() {\n  const [state, setState] = useState({\n    server_seed: \"\",\n    amount: 10\n  });\n\n  useEffect(() => {\n    if (location.search) {\n      const qr = location.search;\n      const param = new URLSearchParams(qr);\n      const seed = param.get(\"seed\");\n      if (seed) {\n        setState((pre) => ({ ...pre, server_seed: seed }));\n      }\n    }\n  }, [location.search]);\n\n  function getPoint(hash, salt) {\n    const nBits = 52; // number of most significant bits to use\n    let seed = hash;\n    // 1. HMAC_SHA256(message=seed, key=salt)\n    if (salt) {\n      const hmac = CryptoJS.HmacSHA256(CryptoJS.enc.Hex.parse(seed), salt);\n      seed = hmac.toString(CryptoJS.enc.Hex);\n    }\n    // 2. r = 52 most significant bits\n    seed = seed.slice(0, nBits / 4);\n    const r = parseInt(seed, 16);\n    // 3. X = r / 2^52\n    let X = r / 2 ** nBits; // uniformly distributed in [0, 1)\n    X = parseFloat(X.toPrecision(9));\n    // 4. X = 99 / (1-X)\n    X = 99 / (1 - X);\n    // 5. return max(trunc(X), 100)\n    const result = Math.floor(X);\n    // return Math.max(1, result / 100);\n    return Math.min(10000, Math.max(1, result / 100));\n  }\n\n  const chain = [state.server_seed];\n  for (let i = 0; i < state.amount; i++) {\n    chain.push(\n      CryptoJS.SHA256(chain[chain.length - 1]).toString(CryptoJS.enc.Hex)\n    );\n  }\n  const clientSeed =\n    \"0000000000000000000201860b3a97d0f85f0619c198875a803f57f2aaa02a67\";\n  return (\n    <div className=\"App\">\n      <h3>Enter the server seed of your game</h3>\n      <input\n        style={{ width: 450 }}\n        value={state.server_seed}\n        onChange={(e) => setState({ ...state, server_seed: e.target.value })}\n      />\n      <br />\n      <br />\n      <h3>Enter the # of games to view before this one</h3>\n      <input\n        value={state.amount}\n        onChange={(e) => setState({ ...state, amount: e.target.value })}\n      />\n\n      <hr />\n      <h1>Crash points:</h1>\n\n      {!state.server_seed || state.server_seed.length !== 64 ? (\n        <h3 style={{ color: \"red\" }}>\n          Please enter a server seed to view this table\n        </h3>\n      ) : (\n        <table>\n          <thead>\n            <tr>\n              <th>Crash point</th>\n              <th>Seed</th>\n            </tr>\n          </thead>\n          <tbody>\n            {chain.map((seed, index) => {\n              // roulette number from 0-15\n              const point = getPoint(seed, clientSeed);\n\n              return (\n                <tr key={`row_${seed}`}>\n                  <td style={{ color: point < 2 ? \"red\" : \"green\" }}>\n                    {point}\n                  </td>\n                  <td>{seed}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}